name: 'Build and Release'
on:
  push:
    branches:
      - main

jobs:     
  build:
    runs-on: stackspot-customer-success-sandbox
    strategy:
      matrix:
        dotnet-version: ['6.0.x']
    container:
      image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.nuget/packages
          key: {{'${{ runner.os }}'}}-nuget-{{"${{ hashFiles('**/*.csproj') }}"}}
          restore-keys: |
            {{'${{ runner.os }}'}}-nuget-
      - name: Setup .NET Core SDK {{'${{ matrix.dotnet-version }}'}}
        uses: actions/setup-dotnet@v1.8.1
        with:
          dotnet-version: {{'${{ matrix.dotnet-version }}'}}       
      - name: Install dependencies
        run: dotnet restore {{project_name}}.Api.sln
        working-directory: ./
      - name: Test
        run: dotnet test {{project_name}}.Api.sln --no-restore --verbosity normal
        working-directory: ./
      - name: Build
        run: dotnet publish "{{project_name}}.Api/{{project_name}}.Api.csproj" --no-restore -c Release -o ./release
        working-directory: ./src
      - uses: actions/cache@v1
        with:
          path: ./src/release
          key: {{'${{ github.sha }}'}}-release

  sast: 
    name: Security testing 
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        fetch-depth: 0 # fetch all history so multiple commits can be scanned          
    - name: Setup Snyk 
      uses: snyk/actions/setup@master
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
    - name: Install dependencies
      run: dotnet restore AppTest.Api.sln    
    - name: Create path report
      run: mkdir -p reports
    - name: Running Snyk
      id: step_snyk
      run: | 
        snyk test --all-projects --json --json-file-output=reports/snyk.json
      env:
          SNYK_TOKEN: {{'${{ secrets.SNYK_TOKEN }}'}}
    - name: Running Horus Security
      id: step_horusec
      env:
        HORUSEC_CLI_REPOSITORY_AUTHORIZATION: {{'${{ secrets.HORUSEC_CLI_REPOSITORY_AUTHORIZATION }}'}}
      run: |
        curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | bash -s latest
        horusec start -p="./" -e="true" 
    - name: GitGuardian scan
      uses: GitGuardian/ggshield-action@master
      with:
          args: -v --all-policies
      env:
          GITHUB_PUSH_BEFORE_SHA: {{'${{ github.event.before }}'}}
          GITHUB_PUSH_BASE_SHA: {{'${{ github.event.base }}'}}
          GITHUB_PULL_BASE_SHA: {{'${{ github.event.pull_request.base.sha }}'}}
          GITHUB_DEFAULT_BRANCH: {{'${{ github.event.repository.default_branch }}'}}
          GITGUARDIAN_API_KEY: {{'${{ secrets.GITGUARDIAN_API_KEY }}'}}

  secrets:
    name: Secrets
    needs: sast
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Run secrets scan
        env:
          GITGUARDIAN_API_KEY: {{'${{ secrets.GITGUARDIAN_API_KEY }}'}}
          GITHUB_DEFAULT_BRANCH: {{'${{ github.event.repository.default_branch }}'}}
          GITHUB_PULL_BASE_SHA: {{'${{ github.event.pull_request.base.sha }}'}}
          GITHUB_PUSH_BASE_SHA: {{'${{ github.event.base }}'}}
          GITHUB_PUSH_BEFORE_SHA: {{'${{ github.event.before }}'}}
        uses: GitGuardian/ggshield-action@master
        with:
          args: --verbose --all-policies          

  docker_hub:
    needs: secrets
    runs-on: ubuntu-20.04
    steps:
      
      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: stackspot
          password: {{'${{ secrets.DOCKER_HUB_TOKEN }}'}}
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ./src/{{project_name}}.Api/{{project_name}}.Api.csproj/Dockerfile
          tags: stackspot/dotnet-demo-api:{{'${{ steps.vars.outputs.tag }}'}}

  runtime-engine-deploy:
    needs: docker_hub
    runs-on: stackspot-customer-success-sandbox
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
              curl --location --request PUT 'https://runtime-engine-api.runtimes.stackspot.com/apps/{{global_inputs.app_runtime_id}}/deploys/' \
              --header 'Content-Type: multipart/form-data' \
              --form 'spec=@"{{'${{ github.workspace }}'}}/oam.yaml"' \
              --form 'target="87784b3c-6146-4e74-960b-48304665845a"'  
